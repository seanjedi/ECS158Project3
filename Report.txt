Program 1: Matrix-multiplication with message passing.

We decided to implement matrix multiplication using multiply_mpi the ikj matrix multiplication from Project 1. The main funtion handles input validation and initializes the MPI environment. We separate the work by a master slave working paradigm with com0 being the master and coms being the slaves. Initially the master will allocate and initialize the matrices A, B and C. The master will send the relevant chunk sizes, parts of the matrix A and also send B via MPI_Send. The slaves will receive these parameters via MPI_Recv to start working on their own pieces. The slaves will calculate the relevant parts of the C matrix independently. They will all use the multiply_mpi function to calculate a piece of C and send the calculated piece back to the master via MPI_Send. The master will be listening for these messages using MPI_Recv and an offset variable will keep track of which parts of the C matrix are being received to rebuild the C matrix.




Program 2: Mandelbrot

We use the same master slave working paradigm as in Program 1 for Program 2, with com0 being the master and coms being the slaves. The main function again handles the input validation and initialization of the MPI environment. The master starts out by calculating the relevant chunk sizes and starting indexes and sends the parameters that the slaves will be using with a combination of MPI_Send and MPI_Broadcast. (chunk_size, start, xcenter, ycenter, cutoff, increment). The slaves will then receive all the parameters via a combination of MPI_Recv and MPI_Broadcast and start working on the chunk they have received. 

The function compute_mandelbrot will map the complex plane with the 1024x1024 matrix. We iterate over the 1024x1024 matrix and align the index of the image of the mandelbrot set with the matrix. In order to map the correct image we had to start iterating from the bottom left corner of the image. We calculate the x distance from the center to the left side of the image using xcenter and the increment and since we know that it is being mapped to a 1024x1024 matrix the distance would equate to 512*increment. We do the same for the y distance and with the new x and y coordinates we have found the bottom left corner. Using the start and chunk sizes we are able to increment our x’s and y’s independently in order to calculate whether values are in mandelbrot set or not. znext = zcurr + zcurr * C with C = xvalue + yvalue * I and |znext| > 2. Once the mandelbrot set is calculated for the chunk the chunk is returned back to the master. The master rebuilds the 1024x1024 matrix from the slaves using MPI_Recv. The matrix is transposed and written to a file to give the output mandelbrot pgm file.